name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff
      
      - name: Lint with ruff
        run: |
          ruff check src/ tests/
          ruff format --check src/ tests/

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Skip some combinations to save CI time
          - os: macos-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.9'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
      
      - name: Test with pytest
        run: |
          pytest tests/ -v --cov=mini_bayes_ppi --cov-report=xml
      
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  test-gpu:
    runs-on: ubuntu-latest
    container:
      image: pytorch/pytorch:2.1.0-cuda11.8-cudnn8-runtime
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
      
      - name: Test GPU functionality
        run: |
          python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')"
          pytest tests/test_core.py::TestGPUSupport -v

  test-notebooks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
          pip install nbval jupyter
      
      - name: Test notebooks
        run: |
          pytest --nbval-lax docs/notebooks/ || echo "No notebooks to test"

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build distribution
        run: python -m build
      
      - name: Check distribution
        run: |
          twine check dist/*
          # Check that the package size is reasonable
          find dist -name "*.whl" -size +10M -exec echo "Warning: Wheel {} is larger than 10MB" {} \;
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  test-install:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
      
      - name: Install from wheel
        run: |
          python -m pip install --upgrade pip
          pip install dist/*.whl
      
      - name: Test import
        run: |
          python -c "import mini_bayes_ppi; print(mini_bayes_ppi.__version__)"
          python -c "from mini_bayes_ppi import MBModel, load_string_prior"

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]" || pip install -e .
          pip install sphinx sphinx-rtd-theme
      
      - name: Build documentation
        run: |
          cd docs || mkdir docs
          sphinx-quickstart -q -p "mini_bayes_ppi" -a "Isabella Withnell" --ext-autodoc --ext-napoleon --makefile || echo "Docs not set up"
          make html || echo "No documentation to build"
