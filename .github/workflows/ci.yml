name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff
      
      - name: Lint with ruff
        run: |
          # Create directories if they don't exist
          mkdir -p src tests
          # Only lint if directories exist and contain Python files
          if [ -d "src" ] && [ "$(find src -name '*.py' | wc -l)" -gt 0 ]; then
            ruff check src/
            ruff format --check src/
          fi
          if [ -d "tests" ] && [ "$(find tests -name '*.py' | wc -l)" -gt 0 ]; then
            ruff check tests/
            ruff format --check tests/
          fi

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Skip some combinations to save CI time
          - os: macos-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.9'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          # Install build dependencies first
          pip install "torch>=2.1" --index-url https://download.pytorch.org/whl/cpu
          pip install "pyro-ppl>=1.9"
          # Then install package in editable mode
          pip install -e ".[test]"
      
      - name: Test with pytest
        run: |
          pytest tests/ -v --cov=mini_bayes_ppi --cov-report=xml --tb=short
      
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false  # Don't fail CI if codecov fails

  test-gpu:
    runs-on: ubuntu-latest
    container:
      image: pytorch/pytorch:2.1.0-cuda11.8-cudnn8-runtime
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e ".[test]"
      
      - name: Test GPU functionality
        run: |
          python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')"
          # Only run GPU tests if they exist
          if python -c "import pytest; pytest.main(['--collect-only', 'tests/test_core.py::TestGPUSupport'])" 2>/dev/null; then
            pytest tests/test_core.py::TestGPUSupport -v
          else
            echo "No GPU tests found, skipping"
          fi

  test-notebooks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install "torch>=2.1" --index-url https://download.pytorch.org/whl/cpu
          pip install -e ".[test]"
          pip install nbval jupyter
      
      - name: Test notebooks
        run: |
          # Only test notebooks if they exist
          if [ -d "docs/notebooks" ] && [ "$(find docs/notebooks -name '*.ipynb' | wc -l)" -gt 0 ]; then
            pytest --nbval-lax docs/notebooks/
          else
            echo "No notebooks found to test"
          fi

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install build twine
      
      - name: Build distribution
        run: python -m build
      
      - name: Check distribution
        run: |
          twine check dist/*
          # Check that the package size is reasonable
          find dist -name "*.whl" -size +10M -exec echo "Warning: Wheel {} is larger than 10MB" {} \; || true
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  test-install:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Install from wheel
        run: |
          python -m pip install --upgrade pip
          # Install PyTorch first to avoid dependency conflicts
          pip install "torch>=2.1" --index-url https://download.pytorch.org/whl/cpu
          pip install dist/*.whl
      
      - name: Test import
        run: |
          python -c "import mini_bayes_ppi; print(mini_bayes_ppi.__version__)"
          python -c "from mini_bayes_ppi import MBModel, load_string_prior"

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install "torch>=2.1" --index-url https://download.pytorch.org/whl/cpu
          pip install -e ".[docs]" || pip install -e .
          pip install sphinx sphinx-rtd-theme
      
      - name: Build documentation
        run: |
          if [ -d "docs" ]; then
            cd docs
            if [ -f "conf.py" ]; then
              make html || sphinx-build -b html . _build/html
            else
              sphinx-quickstart -q -p "mini_bayes_ppi" -a "Isabella Withnell" --ext-autodoc --ext-napoleon --makefile
              make html || echo "Documentation setup needed"
            fi
          else
            echo "No documentation directory found"
          fi
